Interfaces
Under the hood, interface values can be thought of as a tuple of a value and a concrete type:
(value, type)

1. problem_01
    A value of interface type can hold any value that implements the methods of interface type.
    Catch: receiver type should match. We cannot assign a type which implements pointer receiver type to a interface
    type which is expecting a value receiver type and vice versa

2. problem_02
   A interface type can only call methods declared in the interface on the concrete type it is holding

3. problem_03
    If the concrete value inside the interface itself is nil, the method will be called with a nil receiver.
    In some languages this would trigger a null pointer exception, but in Go it is common to write methods that
    gracefully handle being called with a nil receiver (as with the method M in this example.)
    Note that an interface value that holds a nil concrete value is itself non-nil.

4. problem_04
    Nil interface values
    A nil interface value holds neither value nor concrete type.
    Calling a method on a nil interface is a run-time error because there is no type inside the interface tuple to
    indicate which concrete method to call.

5. problem_05
    Type assertions
    A type assertion provides access to an interface value's underlying concrete value.
    t := i.(T)
    This statement asserts that the interface value i holds the concrete type T and assigns the underlying T value to
    the variable t.

    If i does not hold a T, the statement will trigger a panic.
    To test whether an interface value holds a specific type, a type assertion can return two values:
    the underlying value and a boolean value that reports whether the assertion succeeded.
    t, ok := i.(T)
    If i holds a T, then t will be the underlying value and ok will be true.
    If not, ok will be false and t will be the zero value of type T, and no panic occurs.
    Note the similarity between this syntax and that of reading from a map.

6. problem_06: https://tour.golang.org/methods/16
    Type switches
    A type switch is a construct that permits several type assertions in series.
    A type switch is like a regular switch statement, but the cases in a type switch specify types (not values),
    and those values are compared against the type of the value held by the given interface value.

7. problem_07
    Exercise: Errors
    Copy your Sqrt function from the earlier exercise and modify it to return an error value.
    Sqrt should return a non-nil error value when given a negative number, as it doesn't support complex numbers.
    Create a new type
    type ErrNegativeSqrt float64
    and make it an error by giving it a
    func (e ErrNegativeSqrt) Error() string
    method such that ErrNegativeSqrt(-2).Error() returns "cannot Sqrt negative number: -2"

8. problem_08
    Readers
    The io package specifies the io.Reader interface, which represents the read end of a stream of data.
    The Go standard library contains many implementations of these interfaces, including files, network connections,
    compressors, ciphers, and others.
    The io.Reader interface has a Read method:
    func (T) Read(b []byte) (n int, err error)
    Read populates the given byte slice with data and returns the number of bytes populated and an error value.
    It returns an io.EOF error when the stream ends.
    The example code creates a strings.Reader and consumes its output 8 bytes at a time.

9. problem_09
    Exercise: rot13Reader
    A common pattern is an io.Reader that wraps another io.Reader, modifying the stream in some way.
    For example, the gzip.NewReader function takes an io.Reader (a stream of compressed data) and returns a *gzip.Reader
    that also implements io.Reader (a stream of the decompressed data).

    Implement a rot13Reader that implements io.Reader and reads from an io.Reader, modifying the stream by applying the
    rot13 substitution cipher to all alphabetical characters.
    The rot13Reader type is provided for you. Make it an io.Reader by implementing its Read method.

Note:
    The interface type that specifies zero methods is known as the empty interface: interface{}
    An empty interface may hold values of any type. (Every type implements at least zero methods.)
    Empty interfaces are used by code that handles values of unknown type.
    For example, fmt.Print takes any number of arguments of type interface{}.