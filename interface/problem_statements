Interfaces
Under the hood, interface values can be thought of as a tuple of a value and a concrete type:
(value, type)

1. problem_01
    A value of interface type can hold any value that implements the methods of interface type.
    Catch: receiver type should match. We cannot assign a type which implements pointer receiver type to a interface
    type which is expecting a value receiver type and vice versa

2. problem_02
   A interface type can only call methods declared in the interface on the concrete type it is holding

3. problem_03
    If the concrete value inside the interface itself is nil, the method will be called with a nil receiver.
    In some languages this would trigger a null pointer exception, but in Go it is common to write methods that
    gracefully handle being called with a nil receiver (as with the method M in this example.)
    Note that an interface value that holds a nil concrete value is itself non-nil.