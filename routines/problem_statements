Goroutines
    A goroutine is a lightweight thread managed by the Go runtime.
        go f(x, y, z)
    starts a new goroutine running
        f(x, y, z)
    Note: The evaluation of f, x, y, and z happens in the current goroutine and the execution of f happens
    in the new goroutine.
    Goroutines run in the same address space, so access to shared memory must be synchronized.
    The sync package provides useful primitives, although you won't need them much in Go as there are other primitives.

Channels: problem_01
    Channels are a typed conduit through which you can send and receive values with the channel operator, <-.
        ch <- v     // Send v to channel ch.
        v := <-ch   // Receive from ch, and
                    // assign value to v.
    (The data flows in the direction of the arrow.)

    Like maps and slices, channels must be created before use:
    ch := make(chan int)
    By default, sends and receives block until the other side is ready. This allows goroutines to synchronize without
    explicit locks or condition variables.
    The example code sums the numbers in a slice, distributing the work between two goroutines. Once both goroutines
    have completed their computation, it calculates the final result.

Buffered Channels
    Channels can be buffered. Provide the buffer length as the second argument to make to initialize a buffered channel:
        ch := make(chan int, 100)
    Sends to a buffered channel block only when the buffer is full. Receives block when the buffer is empty.

Range and Close
    A sender can close a channel to indicate that no more values will be sent. Receivers can test whether a channel has
    been closed by assigning a second parameter to the receive expression: after
        v, ok := <-ch
    ok is false if there are no more values to receive and the channel is closed.
    The loop for i := range c receives values from the channel repeatedly until it is closed.

    Note: Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.
    Note: Channels aren't like files; you don't usually need to close them. Closing is only necessary when the receiver
    must be told there are no more values coming, such as to terminate a range loop.

Select: problem_02
    The select statement lets a goroutine wait on multiple communication operations.
    A select blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple
    are ready.

Default Selection: problem_03
    The default case in a select is run if no other case is ready.
    Use a default case to try a send or receive without blocking:
    select {
        case i := <-c:
            // use i
        default:
            // receiving from c would block
    }

Exercise: Equivalent Binary Trees: problem_04
    1. Implement the Walk function.
    2. Test the Walk function.
        The function tree.New(k) constructs a randomly-structured (but always sorted) binary tree holding the values
        k, 2k, 3k, ..., 10k.
        Create a new channel ch and kick off the walker:
            go Walk(tree.New(1), ch)
        Then read and print 10 values from the channel. It should be the numbers 1, 2, 3, ..., 10.
    3. Implement the Same function using Walk to determine whether t1 and t2 store the same values.
    4. Test the Same function.
    Same(tree.New(1), tree.New(1)) should return true, and Same(tree.New(1), tree.New(2)) should return false.
    The documentation for Tree can be found https://godoc.org/golang.org/x/tour/tree#Tree.

sync.Mutex: problem_05
    We've seen how channels are great for communication among goroutines.
    But what if we don't need communication? What if we just want to make sure only one goroutine can access a variable
    at a time to avoid conflicts?
    This concept is called mutual exclusion, and the conventional name for the data structure that provides it is mutex.
    Go's standard library provides mutual exclusion with sync.Mutex and its two methods:
        Lock
        Unlock
    We can define a block of code to be executed in mutual exclusion by surrounding it with a call to Lock and Unlock as
    shown on the Inc method.
    We can also use defer to ensure the mutex will be unlocked as in the Value method.

Synchronization using single unbuffered channel: problem_06

Go Concurrency Patterns: Pipelines and cancellation
    What is a pipeline?
        There's no formal definition of a pipeline in Go; it's just one of many kinds of concurrent programs.
        Informally, a pipeline is a series of stages connected by channels, where each stage is a group of goroutines
        running the same function. In each stage, the goroutines

    1. receive values from upstream via inbound channels
    2. perform some function on that data, usually producing new values
    3. send values downstream via outbound channels
    Each stage has any number of inbound and outbound channels, except the first and last stages, which have only
    outbound or inbound channels, respectively. The first stage is sometimes called the source or producer; the last
    stage, the sink or consumer.
    We'll begin with a simple example pipeline to explain the ideas and techniques. Later, we'll present a more
    realistic example.

Squaring numbers: problem_07
    Consider a pipeline with three stages.
    The first stage, gen, is a function that converts a list of integers to a channel that emits the integers in the
    list. The gen function starts a goroutine that sends the integers on the channel and closes the channel when all
    the values have been sent:

    The second stage, sq, receives integers from a channel and returns a channel that emits the square of each received
    integer. After the inbound channel is closed and this stage has sent all the values downstream,
    it closes the outbound channel:

    The main function sets up the pipeline and runs the final stage: it receives values from the second stage and
    prints each one, until the channel is closed:

    Since sq has the same type for its inbound and outbound channels, we can compose it any number of times.
    We can also rewrite main as a range loop, like the other stages:

Fan-out, fan-in: problem_08
https://blog.golang.org/pipelines
    Multiple functions can read from the same channel until that channel is closed; this is called fan-out.
    This provides a way to distribute work amongst a group of workers to parallelize CPU use and I/O.
    A function can read from multiple inputs and proceed until all are closed by multiplexing the input channels onto a
    single channel that's closed when all the inputs are closed. This is called fan-in.
    We can change our pipeline to run two instances of sq, each reading from the same input channel.
    We introduce a new function, merge, to fan in the results:

    The merge function converts a list of channels to a single channel by starting a goroutine for each inbound channel
    that copies the values to the sole outbound channel. Once all the output goroutines have been started, merge starts
    one more goroutine to close the outbound channel after all sends on that channel are done.
    Sends on a closed channel panic, so it's important to ensure all sends are done before calling close. The
    sync.WaitGroup type provides a simple way to arrange this synchronization:

Stopping short
    There is a pattern to our pipeline functions:
    1. stages close their outbound channels when all the send operations are done.
    2. stages keep receiving values from inbound channels until those channels are closed.
    This pattern allows each receiving stage to be written as a range loop and ensures that all goroutines exit once all
    values have been successfully sent downstream.

    But in real pipelines, stages don't always receive all the inbound values. Sometimes this is by design: the receiver
    may only need a subset of values to make progress. More often, a stage exits early because an inbound value
    represents an error in an earlier stage. In either case the receiver should not have to wait for the remaining
    values to arrive, and we want earlier stages to stop producing values that later stages don't need.

Explicit cancellation
    When main decides to exit without receiving all the values from out, it must tell the goroutines in the upstream
    stages to abandon the values they're trying to send. It does so by sending values on a channel called done.